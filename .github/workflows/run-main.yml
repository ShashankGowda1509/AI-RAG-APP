name: Flask Application CI/CD

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  FLASK_APP: app.py
  SESSION_SECRET: ${{ secrets.SESSION_SECRET }}
  GROQ_API_KEY: ${{ secrets.GROQ_API_KEY }}
  MAIL_SERVER: ${{ secrets.MAIL_SERVER }}
  MAIL_PORT: ${{ secrets.MAIL_PORT }}
  MAIL_USERNAME: ${{ secrets.MAIL_USERNAME }}
  MAIL_PASSWORD: ${{ secrets.MAIL_PASSWORD }}
  MAIL_DEFAULT_SENDER: ${{ secrets.MAIL_DEFAULT_SENDER }}

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Extract dependencies from pyproject.toml
      run: |
        echo "Extracting dependencies from pyproject.toml"
        grep '".*>=.*"' pyproject.toml | sed 's/^[ ]*"\(.*\)",\?$/\1/' > requirements.txt
        cat requirements.txt
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install flake8 pytest
        
    - name: Lint with flake8
      run: |
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        
    - name: Initialize database
      run: |
        python -c "from app import init_db; init_db()"
        
    - name: Run tests
      run: |
        pytest

  deploy:
    needs: build-and-test
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Extract dependencies from pyproject.toml
      run: |
        echo "Extracting dependencies from pyproject.toml"
        grep '".*>=.*"' pyproject.toml | sed 's/^[ ]*"\(.*\)",\?$/\1/' > requirements.txt
        cat requirements.txt
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install gunicorn
        
    - name: Deploy application
      run: |
        echo "Starting Flask application with gunicorn"
        gunicorn -w 4 -b 0.0.0:8000 app:app --daemon
        echo "Application deployed successfully"
